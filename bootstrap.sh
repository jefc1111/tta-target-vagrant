#!/usr/bin/env bash

# A password that will be used for a bunch of things. Obviously don't use this password outside of local dev. 
PASSWORD='Wolfgang57'

mkdir /logs
# Various processes to follow will write to this logfile. Once the VM is up you can SSH into it and watch this file.
touch /logs/vm_build.log

# Ubuntu 22 defaults to 750 on home dirs. This change allows Apache to execute files it needs to. 
sudo chmod +x /home/vagrant/ 

# Install PPA 'ondrej/php'. The PPA is well known, and is safe to use.
sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:ondrej/php

# Update / upgrade Ubuntu
sudo apt-get -y update >> /logs/vm_build.log 2>&1
sudo apt-get -y upgrade >> /logs/vm_build.log 2>&1

# Install Apache
sudo apt-get install -y apache2

# Install php8.0 and many PHP modules
# We need PHP 8 because we need Laravel 7 because it is the last version vulnerable to the timing attack we are testing
sudo apt-get install -y php8.0 php8.0-cli php8.0-common libapache2-mod-php8.0 php8.0-fpm php8.0-curl php8.0-gd php8.0-bz2 php8.0-tidy php8.0-mbstring php-redis php-memcached php8.0-xml php8.0-zip php8.0-mysql php8.0-bcmath php8.0-mysqlnd php8.0-soap php8.0-igbinary php8.0-redis

sudo update-alternatives --set php /usr/bin/php8.0

# Copy our open SSL conf across (Ubuntu 22.04 needs an amendment to allow old TLS version for tunnelled connection to live data db)
sudo \cp /home/vagrant/resources/openssl.cnf /etc/ssl/openssl.cnf

# install mysql and give password to installer
sudo debconf-set-selections <<< "mysql-server mysql-server/root_password password $PASSWORD"
sudo debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $PASSWORD"
sudo apt-get install -y mysql-server

# setup hosts file
VHOST=$(cat <<EOF
<VirtualHost *:443>
    ServerName tta-target.local-dev
    DocumentRoot "/home/vagrant/tta-target/public"
    <Directory "/home/vagrant/tta-target/public">
        AllowOverride All
        Require all granted
    </Directory>

    SSLEngine on
    SSLCertificateFile      /home/vagrant/ssl_cert/server.crt
    SSLCertificateKeyFile   /home/vagrant/ssl_cert/server.key
</VirtualHost>
EOF
)
echo "${VHOST}" > /etc/apache2/sites-available/000-default.conf

# enable mod_rewrite
sudo a2enmod rewrite

# Set up http2 (https://www.linode.com/docs/guides/how-to-configure-http-2-on-apache/)
sudo a2dismod php8.0
sudo a2enconf php8.0-fpm
sudo a2enmod proxy_fcgi
sudo a2dismod mpm_prefork
sudo a2enmod mpm_event
sudo a2enmod ssl
sudo a2enmod http2

# Set up DNS
# We need to do this so the VM can see the world properly, for things like `composer install`
sudo apt-get install -y resolvconf

DNS_STUFF=$(cat <<EOF
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run "systemd-resolve --status" to see details about the actual nameservers.
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
)

echo "${DNS_STUFF}" > /etc/resolvconf/resolv.conf.d/head

sudo resolvconf --enable-updates
sudo resolvconf -u

sudo service apache2 restart
sudo service mysql restart

# Not doing apt-get install -y composer because it is not up to date at time of writing so using this as recommended
curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
HASH=`curl -sS https://composer.github.io/installer.sig`
php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

# Composer install
# echo -e "\e[96mAbout to do composer install.\e[0m"
# composer install -d /home/vagrant/timeless-timing-attacks-target >> /logs/vm_build.log 2>&1

# All done
echo -e "\e[96mAdditional output from this script has been piped to /logs/vm_build.log.\e[0m"